package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LeaveAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveAllPropertiesEquals(Leave expected, Leave actual) {
        assertLeaveAutoGeneratedPropertiesEquals(expected, actual);
        assertLeaveAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveAllUpdatablePropertiesEquals(Leave expected, Leave actual) {
        assertLeaveUpdatableFieldsEquals(expected, actual);
        assertLeaveUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveAutoGeneratedPropertiesEquals(Leave expected, Leave actual) {
        assertThat(expected)
            .as("Verify Leave auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveUpdatableFieldsEquals(Leave expected, Leave actual) {
        assertThat(expected)
            .as("Verify Leave relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getFromDate()).as("check fromDate").isEqualTo(actual.getFromDate()))
            .satisfies(e -> assertThat(e.getToDate()).as("check toDate").isEqualTo(actual.getToDate()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveUpdatableRelationshipsEquals(Leave expected, Leave actual) {
        assertThat(expected)
            .as("Verify Leave relationships")
            .satisfies(e -> assertThat(e.getEmployee()).as("check employee").isEqualTo(actual.getEmployee()));
    }
}
